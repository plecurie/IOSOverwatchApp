#!/usr/bin/env node
'use strict';

var _assign = require('babel-runtime/core-js/object/assign');

var _assign2 = _interopRequireDefault(_assign);

var _dotenv = require('dotenv');

var _dotenv2 = _interopRequireDefault(_dotenv);

var _commander = require('commander');

var _commander2 = _interopRequireDefault(_commander);

var _chalk = require('chalk');

var _chalk2 = _interopRequireDefault(_chalk);

var _updateNotifier = require('update-notifier');

var _updateNotifier2 = _interopRequireDefault(_updateNotifier);

var _package = require('../package.json');

var _package2 = _interopRequireDefault(_package);

var _default = require('./default.json');

var _default2 = _interopRequireDefault(_default);

var _path = require('path');

var _index = require('./cmd/index');

var cmd = _interopRequireWildcard(_index);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/* eslint no-console:0 import/no-unresolved:0 */

(0, _updateNotifier2.default)({ pkg: _package2.default }).notify();

// Banner.
var banner = '\n▼ ' + _package2.default.name + ' - v' + _package2.default.version + '\n' + _package2.default.homepage + '\n';
console.log(_chalk2.default.cyan(banner));

// Load dotenv.
_dotenv2.default.config({ silent: true });

// Parse CLI args.
_commander2.default.version(_package2.default.version).usage('entrypoint.js [options]').option('-p, --port [n]', 'Port to listen on', process.env.PORT).option('-H, --host [value]', 'Host to listen on', process.env.HOST).option('-D, --docs [value]', 'Generate Docs from folder', _default2.default.docs.folder).option('-L, --lint', 'Lint code with ESLint').option('-n, --no-babel', 'Skip Babel transformation').option('-C, --config [value]', 'Configuration file').parse(process.argv);

// Parse entrypoint file.
var file = _commander2.default.args.pop();
if (!file) {
  try {
    var packageJson = require((0, _path.resolve)( // eslint-disable-line global-require
    process.cwd(), 'package.json'));
    file = packageJson.main;
  } catch (e) {
    console.error(_chalk2.default.red(e));
    process.exit(1);
  }
}

if (!file) {
  console.error(_chalk2.default.red('Error! Please supply a file.'));
  process.exit(1);
}

if (file[0] !== '/') {
  file = (0, _path.resolve)(process.cwd(), file);
}

// Update config object if custom config file is provided.
if (_commander2.default.config) {
  try {
    // Load external config file.
    var customConfig = require((0, _path.resolve)( // eslint-disable-line global-require
    process.cwd(), _commander2.default.config));

    // Extend config object.
    (0, _assign2.default)(_default2.default, customConfig);

    console.log(_chalk2.default.blue('▼ Loading configuration: '), _chalk2.default.white(_commander2.default.config));
  } catch (err) {
    console.error(_chalk2.default.red(err));
    process.exit(1);
  }
}

// Skip babel transpilation if flag set.
if (!_commander2.default.noBabel) {
  try {
    cmd.transpile();
    console.log(_chalk2.default.blue('▼ Babel transpiled. Preset: ES2015'));
  } catch (err) {
    console.error(_chalk2.default.red(err));
    process.exit(1);
  }
}

// Generate docs flag.
if (_commander2.default.docs) {
  try {
    cmd.docs(_commander2.default.docs, _default2.default.docs);
    console.log(_chalk2.default.blue('▼ Docs generated.'), _chalk2.default.white('http://' + _default2.default.app.host + ':' + _default2.default.app.port + '/docs'));
  } catch (err) {
    console.error(_chalk2.default.red(err));
    process.exit(1);
  }
}

if (_commander2.default.lint) {
  try {
    console.log(_chalk2.default.blue('▼ Linting code.'));
    cmd.lint(_default2.default.lint);
  } catch (err) {
    console.error(_chalk2.default.red(err));
    process.exit(1);
  }
}

// Host and port flags take precedence.
_default2.default.app.host = _commander2.default.host || _default2.default.app.host;
_default2.default.app.port = _commander2.default.port || _default2.default.app.port;

// Start server.
cmd.server(file, _default2.default, function (err) {
  if (err) {
    console.error(_chalk2.default.red(err));
  }
  var _config$app = _default2.default.app;
  var host = _config$app.host;
  var port = _config$app.port;

  console.log(_chalk2.default.green('▼ Ready! Listening on:', _chalk2.default.white('http://' + host + ':' + port)));
});
//# sourceMappingURL=data:application/json;base64,